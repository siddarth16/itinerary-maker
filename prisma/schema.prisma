// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Alternative for production - uncomment for PostgreSQL
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

model Trip {
  id                    String   @id @default(cuid())
  tripId                String   @unique // Trip_ID from spec
  title                 String
  currency              String
  partySize             Int
  originCity            String
  originAirportIATA     String?
  travelWindowStart     DateTime
  travelWindowEnd       DateTime
  durationMinDays       Int
  durationMaxDays       Int
  baggagePcs            Int
  cabin                 String   // Economy | PremiumEconomy | Business | First
  nightBusAllowed       Boolean
  refundableOnly        Boolean
  maxHops               Int
  regionPrefs           String?  // comma-separated
  excludedCities        String?  // comma-separated
  notes                 String?
  dateGenerated         DateTime @default(now())
  priceTimestamp        DateTime?
  status                String   @default("queued") // queued | running | completed | error
  paymentStatus         String   @default("pending") // pending | paid
  
  // Relations
  cityPlans             CityPlan[]
  transportLegs         TransportLeg[]
  dailyBudgets          DailyBudget[]
  costsSummary          CostsSummary?
  payments              Payment[]
  
  @@map("trips")
}

model CityPlan {
  id                    String   @id @default(cuid())
  tripId                String
  day                   Int
  date                  DateTime
  city                  String
  country               String
  region                String
  latitude              Float?
  longitude             Float?
  stayCheckIn           DateTime
  stayCheckOut          DateTime
  nights                Int
  stayName              String
  stayType              String   // Hostel | Hotel | Apartment
  roomType              String
  stayCancellation      String   // Free | Partial | Nonref
  stayLink              String?
  stayCurrency          String
  stayPricePerNight     Float
  stayNightsSubtotal    Float
  stayTaxes             Float
  stayTotal             Float
  activitiesNotes       String?
  
  trip                  Trip     @relation(fields: [tripId], references: [tripId], onDelete: Cascade)
  
  @@map("city_plans")
}

model TransportLeg {
  id                    String   @id @default(cuid())
  legId                 String   @unique
  tripId                String
  seq                   Int
  fromCity              String
  fromCode              String
  toCity                String
  toCode                String
  mode                  String   // Flight | Bus | Train | Ferry
  carrier               String
  serviceNo             String
  departLocal           DateTime
  arriveLocal           DateTime
  durationMin           Int
  bagsIncluded          Int
  fareBase              Float?
  taxesFees             Float?
  totalPrice            Float
  currency              String
  nonstop               Boolean
  refundability         String   // Nonref | Partial | Refundable
  bookingLink           String?
  notes                 String?
  source                String
  retrievedAtUtc        DateTime
  
  trip                  Trip     @relation(fields: [tripId], references: [tripId], onDelete: Cascade)
  
  @@map("transport_legs")
}

model DailyBudget {
  id                    String   @id @default(cuid())
  tripId                String
  day                   Int
  date                  DateTime
  city                  String
  food                  Float
  localTransport        Float
  activities            Float
  misc                  Float
  buffer                Float
  dailyTotal            Float
  
  trip                  Trip     @relation(fields: [tripId], references: [tripId], onDelete: Cascade)
  
  @@map("daily_budgets")
}

model CostsSummary {
  id                    String   @id @default(cuid())
  tripId                String   @unique
  flightsTotal          Float
  groundTotal           Float
  stayTotal             Float
  dailyBudgetsTotal     Float
  serviceFee            Float?
  bufferPercent         Float?
  grandTotal            Float
  perPersonTotal        Float
  
  trip                  Trip     @relation(fields: [tripId], references: [tripId], onDelete: Cascade)
  
  @@map("costs_summary")
}

model Payment {
  id                    String   @id @default(cuid())
  tripId                String
  stripeSessionId       String?  @unique
  stripePaymentId       String?  @unique
  amount                Float
  currency              String
  status                String   @default("pending") // pending | completed | failed | cancelled
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  trip                  Trip     @relation(fields: [tripId], references: [tripId], onDelete: Cascade)
  
  @@map("payments")
}

// Raw offers from providers before normalization
model OfferRaw {
  id                    String   @id @default(cuid())
  type                  String   // flight | stay | ground
  provider              String
  searchParams          String   // JSON string of search parameters
  rawData               String   // JSON string of raw offer data
  retrievedAt           DateTime @default(now())
  
  @@map("offers_raw")
}

// Normalized offers
model OfferNormalized {
  id                    String   @id @default(cuid())
  type                  String   // flight | stay | ground
  provider              String
  searchParamsHash      String   // Hash of search parameters for deduplication
  normalizedData        String   // JSON string of normalized offer data
  retrievedAt           DateTime @default(now())
  
  @@index([type, searchParamsHash])
  @@map("offers_normalized")
}

// Request tracking for caching and idempotency
model Request {
  id                    String   @id @default(cuid())
  tripId                String   
  paramsHash            String   // Hash of normalized request parameters
  status                String   @default("queued") // queued | running | completed | error
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  result                String?  // JSON result or error message
  
  @@unique([tripId, paramsHash])
  @@map("requests")
}
